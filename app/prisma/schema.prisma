// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId 
  create_account_timestamp Int
  public_key String? @unique
  login String @unique
  password String
  salt String
  nickname String @unique
  logins_history Login_History[]
  sessions Session[]
  penalties Penalty[]
  alerts Alert[]
  profile Profile
  settings Setting
  
  role_id String? @unique @db.ObjectId
  role Role? @relation(fields: [role_id], references: [id])

  invites Invite[] @relation("MyInvites")
  invited Invite? @relation("MyInviter")

  tag_follower_id String[] @db.ObjectId @unique
  tag_black_list_id String[] @db.ObjectId @unique
  tag_follower Tag[] @relation("Followers", fields: [tag_follower_id], references: [id])
  tag_black_lists Tag[] @relation("Black_List", fields: [tag_black_list_id], references: [id])

  questions Question[] @relation("Author_Question")
  visited_questions_ids String[] @db.ObjectId @unique
  visited_questions Question[] @relation("Visitor_Question", fields: [visited_questions_ids], references: [id])

  solutions Solution[] @relation("Author_Solution")
  
  rating_solutions Rating[] @relation("Rating_Solution")

  my_file_ids String[] @db.ObjectId
  my_files File[] @relation("My_Files",fields: [my_file_ids], references: [id])
}

model Invite{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId  // id == token
  inviter User     @relation("MyInvites",fields: [inviterID], references: [id])
  inviterID String @db.ObjectId
  invited User?     @relation("MyInviter", fields: [invitedID], references: [id])
  invitedID String? @db.ObjectId @unique
  is_active Boolean
  create_time Int
  end_time Int
}

type Alert{
  title String
  description String
  icon String
  url String
  timestamp Int
  action AlertAction
  status AlertStatus @default(NOT_READ)
}

enum AlertAction{
  NONE
  OPEN_URL
}

enum AlertStatus{
  NOT_READ
  READ
}

type Profile{
  avatar String? @default("")
  description String? @default("")
}

type Setting{
  language Language @default(PL)
}

enum Language{
  PL
  EN
}

type Login_History{
  ip String
  user_agent String
  time Int
  status Boolean
}

type Session{
  ip String?
  token String
  user_agent String?
  start_timestamp Int?
  end_timestamp Int?
  is_active Boolean? @default(false)
}

type Penalty{
  start_timestamp Int
  end_timestamp Int
  is_perm Boolean @default(false)
  is_active Boolean @default(false)
  description String
}

model Role{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  user_ids String[] @db.ObjectId @unique
  users User[]

  privileges Privilege[]
}

enum Privilege{
  USERS_CAN_WRITE
  USERS_CAN_READ
  USERS_CAN_UPDATE
  USERS_CAN_DELETE

  QUESTIONS_CAN_WRITE
  QUESTIONS_CAN_READ
  QUESTIONS_CAN_UPDATE
  QUESTIONS_CAN_DELETE

  SOLUTIONS_CAN_WRITE
  SOLUTIONS_CAN_READ
  SOLUTIONS_CAN_UPDATE
  SOLUTIONS_CAN_DELETE

  RATINGS_CAN_WRITE
  RATINGS_CAN_READ
  RATINGS_CAN_UPDATE
  RATINGS_CAN_DELETE

  TAGS_CAN_WRITE
  TAGS_CAN_READ
  TAGS_CAN_UPDATE
  TAGS_CAN_DELETE

  ROLES_CAN_WRITE
  ROLES_CAN_READ
  ROLES_CAN_UPDATE
  ROLES_CAN_DELETE

  INVITES_CAN_WRITE
  INVITES_CAN_READ
  INVITES_CAN_UPDATE
  INVITES_CAN_DELETE

  FILES_CAN_WRITE
  FILES_CAN_READ
  FILES_CAN_UPDATE
  FILES_CAN_DELETE
}

// Tags for Questions/Guides ...

model Tag{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  follower_id String[] @db.ObjectId @unique
  black_lister_id String[] @db.ObjectId @unique
  followers User[]  @relation("Followers", fields: [follower_id], references: [id])
  black_list User[] @relation("Black_List", fields: [black_lister_id], references: [id])
  questions_ids String[] @db.ObjectId
  questions Question[] @relation(fields: [questions_ids], references: [id]) 
}

// Module: Questions

model Question{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  author User @relation("Author_Question",fields: [author_id], references: [id])
  author_id String @db.ObjectId
  tags Tag[] @relation(fields: [tags_id], references: [id])
  tags_id String[] @db.ObjectId @unique
  title String
  detail String  // markdown
  create_time Int
  close_time Int?
  update_time Int?   // time of last response
  solved Boolean @default(false)
  visitors_ids String[] @db.ObjectId @unique
  visitors User[] @relation("Visitor_Question",fields: [visitors_ids], references: [id])
  solutions Solution[] @relation("Question_Solution")
}

model Solution{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  author_id String @db.ObjectId  
  author User @relation("Author_Solution", fields: [author_id], references: [id])
  create_time Int
  ratings Rating[]
  content String  // markdown
  question_id String @db.ObjectId
  question Question @relation("Question_Solution",fields: [question_id], references: [id])
}

model File{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  hash String @unique
  owners_ids String[] @db.ObjectId
  owners User[] @relation("My_Files",fields: [owners_ids], references: [id])
  create_time Int
  filename String
  extension String?
  mime String?
  size Int
  path String
}

model Rating{
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  voter_id String @db.ObjectId @unique
  voter User @relation("Rating_Solution", fields: [voter_id], references: [id])
  solution_id String @db.ObjectId @unique
  solution Solution @relation(fields: [solution_id], references: [id])
  value RatingType
}

enum RatingType{
  GOOD 
  BAD 
}